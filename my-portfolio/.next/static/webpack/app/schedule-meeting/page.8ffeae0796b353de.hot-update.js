"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/schedule-meeting/page",{

/***/ "(app-pages-browser)/./src/lib/googleCalendar.ts":
/*!***********************************!*\
  !*** ./src/lib/googleCalendar.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleCalendarAPI: () => (/* binding */ GoogleCalendarAPI),\n/* harmony export */   formatDateTime: () => (/* binding */ formatDateTime)\n/* harmony export */ });\n// lib/googleCalendar.ts\n// Extend Window interface for Google API\nclass GoogleCalendarAPI {\n    async initializeGapi() {\n        if (this.isInitialized) return true;\n        return new Promise((resolve, reject)=>{\n            if (false) {}\n            // Check if gapi is already loaded\n            if (window.gapi) {\n                this.loadGapiClient().then(()=>{\n                    this.isInitialized = true;\n                    resolve(true);\n                }).catch(reject);\n                return;\n            }\n            // Load gapi script\n            const script = document.createElement('script');\n            script.src = 'https://apis.google.com/js/api.js';\n            script.onload = ()=>{\n                this.loadGapiClient().then(()=>{\n                    this.isInitialized = true;\n                    resolve(true);\n                }).catch(reject);\n            };\n            script.onerror = ()=>reject(new Error('Failed to load Google API script'));\n            document.head.appendChild(script);\n        });\n    }\n    async loadGapiClient() {\n        return new Promise((resolve, reject)=>{\n            window.gapi.load('client:auth2', {\n                callback: async ()=>{\n                    try {\n                        await window.gapi.client.init({\n                            clientId: this.clientId,\n                            discoveryDocs: [\n                                'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'\n                            ],\n                            scope: 'https://www.googleapis.com/auth/calendar.events'\n                        });\n                        this.gapi = window.gapi;\n                        resolve();\n                    } catch (error) {\n                        reject(error);\n                    }\n                },\n                onerror: ()=>reject(new Error('Failed to load gapi client'))\n            });\n        });\n    }\n    async signIn() {\n        if (!this.gapi) {\n            throw new Error('Google API not initialized');\n        }\n        const authInstance = this.gapi.auth2.getAuthInstance();\n        if (!authInstance) {\n            throw new Error('Auth instance not available');\n        }\n        return await authInstance.signIn();\n    }\n    async createEvent(eventDetails) {\n        if (!this.gapi) {\n            throw new Error('Google API not initialized');\n        }\n        try {\n            const response = await this.gapi.client.calendar.events.insert({\n                calendarId: 'primary',\n                resource: eventDetails\n            });\n            return response.result;\n        } catch (error) {\n            console.error('Error creating calendar event:', error);\n            throw error;\n        }\n    }\n    isSignedIn() {\n        if (!this.gapi) return false;\n        const authInstance = this.gapi.auth2.getAuthInstance();\n        return authInstance && authInstance.isSignedIn.get();\n    }\n    constructor(){\n        this.isInitialized = false;\n        this.clientId = \"923849660731-834la2ph5c9lcq7kteq3p82j59e5i92p.apps.googleusercontent.com\" || 0;\n    }\n}\n// Utility function to format date/time for Google Calendar\nfunction formatDateTime(date, time) {\n    let duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 30;\n    const [hour, minute] = time.replace(/[AP]M/, '').trim().split(':');\n    const isPM = time.includes('PM');\n    let hour24 = parseInt(hour);\n    if (isPM && hour24 !== 12) hour24 += 12;\n    if (!isPM && hour24 === 12) hour24 = 0;\n    const startDate = new Date(date);\n    startDate.setHours(hour24, parseInt(minute), 0, 0);\n    const endDate = new Date(startDate);\n    endDate.setMinutes(endDate.getMinutes() + duration);\n    return {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/googleCalendar.ts\n"));

/***/ })

});