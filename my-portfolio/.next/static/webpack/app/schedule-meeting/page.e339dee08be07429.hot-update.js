"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/schedule-meeting/page",{

/***/ "(app-pages-browser)/./src/lib/googleCalendar.ts":
/*!***********************************!*\
  !*** ./src/lib/googleCalendar.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleCalendarAPI: () => (/* binding */ GoogleCalendarAPI),\n/* harmony export */   formatDateTime: () => (/* binding */ formatDateTime)\n/* harmony export */ });\n// lib/googleCalendar.ts\n// Extend Window interface for Google API\nclass GoogleCalendarAPI {\n    async initializeGapi() {\n        return new Promise((resolve)=>{\n            if (true) {\n                const script = document.createElement('script');\n                script.src = 'https://apis.google.com/js/api.js';\n                script.onload = ()=>{\n                    window.gapi.load('client:auth2', ()=>{\n                        window.gapi.client.init({\n                            clientId: this.clientId,\n                            discoveryDocs: [\n                                'https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'\n                            ],\n                            scope: 'https://www.googleapis.com/auth/calendar.events'\n                        }).then(()=>{\n                            this.gapi = window.gapi;\n                            resolve(true);\n                        });\n                    });\n                };\n                document.head.appendChild(script);\n            }\n        });\n    }\n    async signIn() {\n        const authInstance = this.gapi.auth2.getAuthInstance();\n        return await authInstance.signIn();\n    }\n    async createEvent(eventDetails) {\n        try {\n            const response = await this.gapi.client.calendar.events.insert({\n                calendarId: 'primary',\n                resource: eventDetails\n            });\n            return response.result;\n        } catch (error) {\n            console.error('Error creating calendar event:', error);\n            throw error;\n        }\n    }\n    isSignedIn() {\n        if (!this.gapi) return false;\n        const authInstance = this.gapi.auth2.getAuthInstance();\n        return authInstance.isSignedIn.get();\n    }\n    constructor(){\n        this.clientId = \"123456789-abc123def456.apps.googleusercontent.com\" || 0;\n    }\n}\n// Utility function to format date/time for Google Calendar\nfunction formatDateTime(date, time) {\n    let duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 30;\n    const [hour, minute] = time.replace(/[AP]M/, '').trim().split(':');\n    const isPM = time.includes('PM');\n    let hour24 = parseInt(hour);\n    if (isPM && hour24 !== 12) hour24 += 12;\n    if (!isPM && hour24 === 12) hour24 = 0;\n    const startDate = new Date(date);\n    startDate.setHours(hour24, parseInt(minute), 0, 0);\n    const endDate = new Date(startDate);\n    endDate.setMinutes(endDate.getMinutes() + duration);\n    return {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvZ29vZ2xlQ2FsZW5kYXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3QkFBd0I7QUFFeEIseUNBQXlDO0FBcUJsQyxNQUFNQTtJQVFYLE1BQU1DLGlCQUFpQjtRQUNyQixPQUFPLElBQUlDLFFBQVEsQ0FBQ0M7WUFDbEIsSUFBSSxJQUE2QixFQUFFO2dCQUNqQyxNQUFNQyxTQUFTQyxTQUFTQyxhQUFhLENBQUM7Z0JBQ3RDRixPQUFPRyxHQUFHLEdBQUc7Z0JBQ2JILE9BQU9JLE1BQU0sR0FBRztvQkFDZEMsT0FBT0MsSUFBSSxDQUFDQyxJQUFJLENBQUMsZ0JBQWdCO3dCQUMvQkYsT0FBT0MsSUFBSSxDQUFDRSxNQUFNLENBQUNDLElBQUksQ0FBQzs0QkFDdEJDLFVBQVUsSUFBSSxDQUFDQSxRQUFROzRCQUN2QkMsZUFBZTtnQ0FBQzs2QkFBZ0U7NEJBQ2hGQyxPQUFPO3dCQUNULEdBQUdDLElBQUksQ0FBQzs0QkFDTixJQUFJLENBQUNQLElBQUksR0FBR0QsT0FBT0MsSUFBSTs0QkFDdkJQLFFBQVE7d0JBQ1Y7b0JBQ0Y7Z0JBQ0Y7Z0JBQ0FFLFNBQVNhLElBQUksQ0FBQ0MsV0FBVyxDQUFDZjtZQUM1QjtRQUNGO0lBQ0Y7SUFFQSxNQUFNZ0IsU0FBUztRQUNiLE1BQU1DLGVBQWUsSUFBSSxDQUFDWCxJQUFJLENBQUNZLEtBQUssQ0FBQ0MsZUFBZTtRQUNwRCxPQUFPLE1BQU1GLGFBQWFELE1BQU07SUFDbEM7SUFFQSxNQUFNSSxZQUFZQyxZQUEyQixFQUFFO1FBQzdDLElBQUk7WUFDRixNQUFNQyxXQUFXLE1BQU0sSUFBSSxDQUFDaEIsSUFBSSxDQUFDRSxNQUFNLENBQUNlLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDQyxNQUFNLENBQUM7Z0JBQzdEQyxZQUFZO2dCQUNaQyxVQUFVTjtZQUNaO1lBQ0EsT0FBT0MsU0FBU00sTUFBTTtRQUN4QixFQUFFLE9BQU9DLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLGtDQUFrQ0E7WUFDaEQsTUFBTUE7UUFDUjtJQUNGO0lBRUFFLGFBQWE7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDekIsSUFBSSxFQUFFLE9BQU87UUFDdkIsTUFBTVcsZUFBZSxJQUFJLENBQUNYLElBQUksQ0FBQ1ksS0FBSyxDQUFDQyxlQUFlO1FBQ3BELE9BQU9GLGFBQWFjLFVBQVUsQ0FBQ0MsR0FBRztJQUNwQztJQWhEQSxhQUFjO1FBQ1osSUFBSSxDQUFDdEIsUUFBUSxHQUFHdUIsbURBQXdDLElBQUksQ0FBRTtJQUNoRTtBQStDRjtBQUVBLDJEQUEyRDtBQUNwRCxTQUFTRyxlQUFlQyxJQUFZLEVBQUVDLElBQVk7UUFBRUMsV0FBQUEsaUVBQW1CO0lBQzVFLE1BQU0sQ0FBQ0MsTUFBTUMsT0FBTyxHQUFHSCxLQUFLSSxPQUFPLENBQUMsU0FBUyxJQUFJQyxJQUFJLEdBQUdDLEtBQUssQ0FBQztJQUM5RCxNQUFNQyxPQUFPUCxLQUFLUSxRQUFRLENBQUM7SUFFM0IsSUFBSUMsU0FBU0MsU0FBU1I7SUFDdEIsSUFBSUssUUFBUUUsV0FBVyxJQUFJQSxVQUFVO0lBQ3JDLElBQUksQ0FBQ0YsUUFBUUUsV0FBVyxJQUFJQSxTQUFTO0lBRXJDLE1BQU1FLFlBQVksSUFBSUMsS0FBS2I7SUFDM0JZLFVBQVVFLFFBQVEsQ0FBQ0osUUFBUUMsU0FBU1AsU0FBUyxHQUFHO0lBRWhELE1BQU1XLFVBQVUsSUFBSUYsS0FBS0Q7SUFDekJHLFFBQVFDLFVBQVUsQ0FBQ0QsUUFBUUUsVUFBVSxLQUFLZjtJQUUxQyxPQUFPO1FBQ0xnQixPQUFPTixVQUFVTyxXQUFXO1FBQzVCQyxLQUFLTCxRQUFRSSxXQUFXO0lBQzFCO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcc2hyYWRcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZWN0c1xcTmV4dGpzLVJlYWN0LVBvcnRmb2xpby1UdXRvcmlhbFxcbXktcG9ydGZvbGlvXFxzcmNcXGxpYlxcZ29vZ2xlQ2FsZW5kYXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2dvb2dsZUNhbGVuZGFyLnRzXHJcblxyXG4vLyBFeHRlbmQgV2luZG93IGludGVyZmFjZSBmb3IgR29vZ2xlIEFQSVxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICBnYXBpOiBhbnk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbGVuZGFyRXZlbnQge1xyXG4gIHN1bW1hcnk6IHN0cmluZztcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gIHN0YXJ0OiB7XHJcbiAgICBkYXRlVGltZTogc3RyaW5nO1xyXG4gICAgdGltZVpvbmU6IHN0cmluZztcclxuICB9O1xyXG4gIGVuZDoge1xyXG4gICAgZGF0ZVRpbWU6IHN0cmluZztcclxuICAgIHRpbWVab25lOiBzdHJpbmc7XHJcbiAgfTtcclxuICBhdHRlbmRlZXM6IEFycmF5PHsgZW1haWw6IHN0cmluZyB9PjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdvb2dsZUNhbGVuZGFyQVBJIHtcclxuICBwcml2YXRlIGNsaWVudElkOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBnYXBpOiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5jbGllbnRJZCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dPT0dMRV9DTElFTlRfSUQgfHwgJyc7XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbml0aWFsaXplR2FwaSgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICBzY3JpcHQuc3JjID0gJ2h0dHBzOi8vYXBpcy5nb29nbGUuY29tL2pzL2FwaS5qcyc7XHJcbiAgICAgICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgIHdpbmRvdy5nYXBpLmxvYWQoJ2NsaWVudDphdXRoMicsICgpID0+IHtcclxuICAgICAgICAgICAgd2luZG93LmdhcGkuY2xpZW50LmluaXQoe1xyXG4gICAgICAgICAgICAgIGNsaWVudElkOiB0aGlzLmNsaWVudElkLFxyXG4gICAgICAgICAgICAgIGRpc2NvdmVyeURvY3M6IFsnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vZGlzY292ZXJ5L3YxL2FwaXMvY2FsZW5kYXIvdjMvcmVzdCddLFxyXG4gICAgICAgICAgICAgIHNjb3BlOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jYWxlbmRhci5ldmVudHMnXHJcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuZ2FwaSA9IHdpbmRvdy5nYXBpO1xyXG4gICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2lnbkluKCkge1xyXG4gICAgY29uc3QgYXV0aEluc3RhbmNlID0gdGhpcy5nYXBpLmF1dGgyLmdldEF1dGhJbnN0YW5jZSgpO1xyXG4gICAgcmV0dXJuIGF3YWl0IGF1dGhJbnN0YW5jZS5zaWduSW4oKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZUV2ZW50KGV2ZW50RGV0YWlsczogQ2FsZW5kYXJFdmVudCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmdhcGkuY2xpZW50LmNhbGVuZGFyLmV2ZW50cy5pbnNlcnQoe1xyXG4gICAgICAgIGNhbGVuZGFySWQ6ICdwcmltYXJ5JyxcclxuICAgICAgICByZXNvdXJjZTogZXZlbnREZXRhaWxzXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgY2FsZW5kYXIgZXZlbnQ6JywgZXJyb3IpO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzU2lnbmVkSW4oKSB7XHJcbiAgICBpZiAoIXRoaXMuZ2FwaSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgY29uc3QgYXV0aEluc3RhbmNlID0gdGhpcy5nYXBpLmF1dGgyLmdldEF1dGhJbnN0YW5jZSgpO1xyXG4gICAgcmV0dXJuIGF1dGhJbnN0YW5jZS5pc1NpZ25lZEluLmdldCgpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gVXRpbGl0eSBmdW5jdGlvbiB0byBmb3JtYXQgZGF0ZS90aW1lIGZvciBHb29nbGUgQ2FsZW5kYXJcclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGVUaW1lKGRhdGU6IHN0cmluZywgdGltZTogc3RyaW5nLCBkdXJhdGlvbjogbnVtYmVyID0gMzApOiB7IHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nIH0ge1xyXG4gIGNvbnN0IFtob3VyLCBtaW51dGVdID0gdGltZS5yZXBsYWNlKC9bQVBdTS8sICcnKS50cmltKCkuc3BsaXQoJzonKTtcclxuICBjb25zdCBpc1BNID0gdGltZS5pbmNsdWRlcygnUE0nKTtcclxuICBcclxuICBsZXQgaG91cjI0ID0gcGFyc2VJbnQoaG91cik7XHJcbiAgaWYgKGlzUE0gJiYgaG91cjI0ICE9PSAxMikgaG91cjI0ICs9IDEyO1xyXG4gIGlmICghaXNQTSAmJiBob3VyMjQgPT09IDEyKSBob3VyMjQgPSAwO1xyXG5cclxuICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZShkYXRlKTtcclxuICBzdGFydERhdGUuc2V0SG91cnMoaG91cjI0LCBwYXJzZUludChtaW51dGUpLCAwLCAwKTtcclxuICBcclxuICBjb25zdCBlbmREYXRlID0gbmV3IERhdGUoc3RhcnREYXRlKTtcclxuICBlbmREYXRlLnNldE1pbnV0ZXMoZW5kRGF0ZS5nZXRNaW51dGVzKCkgKyBkdXJhdGlvbik7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzdGFydDogc3RhcnREYXRlLnRvSVNPU3RyaW5nKCksXHJcbiAgICBlbmQ6IGVuZERhdGUudG9JU09TdHJpbmcoKVxyXG4gIH07XHJcbn0iXSwibmFtZXMiOlsiR29vZ2xlQ2FsZW5kYXJBUEkiLCJpbml0aWFsaXplR2FwaSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwib25sb2FkIiwid2luZG93IiwiZ2FwaSIsImxvYWQiLCJjbGllbnQiLCJpbml0IiwiY2xpZW50SWQiLCJkaXNjb3ZlcnlEb2NzIiwic2NvcGUiLCJ0aGVuIiwiaGVhZCIsImFwcGVuZENoaWxkIiwic2lnbkluIiwiYXV0aEluc3RhbmNlIiwiYXV0aDIiLCJnZXRBdXRoSW5zdGFuY2UiLCJjcmVhdGVFdmVudCIsImV2ZW50RGV0YWlscyIsInJlc3BvbnNlIiwiY2FsZW5kYXIiLCJldmVudHMiLCJpbnNlcnQiLCJjYWxlbmRhcklkIiwicmVzb3VyY2UiLCJyZXN1bHQiLCJlcnJvciIsImNvbnNvbGUiLCJpc1NpZ25lZEluIiwiZ2V0IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0dPT0dMRV9DTElFTlRfSUQiLCJmb3JtYXREYXRlVGltZSIsImRhdGUiLCJ0aW1lIiwiZHVyYXRpb24iLCJob3VyIiwibWludXRlIiwicmVwbGFjZSIsInRyaW0iLCJzcGxpdCIsImlzUE0iLCJpbmNsdWRlcyIsImhvdXIyNCIsInBhcnNlSW50Iiwic3RhcnREYXRlIiwiRGF0ZSIsInNldEhvdXJzIiwiZW5kRGF0ZSIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwic3RhcnQiLCJ0b0lTT1N0cmluZyIsImVuZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/googleCalendar.ts\n"));

/***/ })

});